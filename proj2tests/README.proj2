1. Installation and Setup

1.1 Setup: Detail the steps for setting up the development environment, including any dependencies or tools required, for the grader to follow.

I used the faster ".config" file for my compiling. My syscalls are in the project2 folder. My user space implementation is in proj2proto folder. My tests are in proj2tests folder.



2. Kernel Modifications

2.1 System Calls Implemented: List the new system calls you've added to the kernel, with a brief description of each.


mailbox_init: initializes BST
mailbox_shutdown: deletes BST
mailbox_create: adds node to BST
mailbox_destroy: deletes node from BST
mailbox_send: sends message to queue inside of a node
mailbox_recv: receieves message from queue inside of a node
mailbox_delete: deletes oldest message from queue inside of a node
message_count: counts how many messages are in a queue inside of a node
message_length: retrieves length of oldest message in a queue inside of a node


2.2 Data Structures: Describe the data structures or modifications to existing structures you implemented.

1. Added a queue node struct
2. Added a queue struct
3. Add a BST tree node struct

Supports basic BST operations. Also supports FIFO for the queues inside of each of the nodes in the BST.


2.3 Locking Mechanisms: Explain the locking mechanisms used, including the rationale behind the choice of each mechanism.

I believe that read-write locks are the most effective way to prevent race conditions for this project. Message_count and message_length are read-only functions and it would be a waste to only allow 1 process to read from them at a time. With my built-in functionality, unlimited processes can read from these 2 functions, while only 1 process can perform edits to the BST at a time, such as in the other 7 functions. Only allowing 1 process to edit the BST at a time will remove possible race conditions. 

Locking Documentation:
1. mailbox_init: write lock
2. mailbox_shutdown: write lock
3. mailbox_create: write lock
4. mailbox_destroy: write lock
5. mailbox_send: write lock
6. mailbox_recv: write lock
7. mailbox_delete: write lock
8. message_count: read lock
9. message_length: read lock


3. User-space Driver Programs


3.1 Driver Overview: Offer an overview of the user-space driver programs, explaining their purpose in testing the system calls.

test_file_one.c: Hardcodes the tests, looking for all cases

test_file_two.c: Takes user input, looking for all cases


3.2 Building Drivers: Include a step-by-step guide to building the driver programs using the provided Makefile.

Bulding test_file_one.c: make -f Makefile
Building test_file_two.c: make -f Makefile2


Running Tests: Describe how to run each test program, including the expected outputs and any command-line arguments or flags.

test_file_one.c: All hardcoded tests should pass

test_file_two.c: Type in user input. I made it as straight forward to follow as possible. 

4. Testing Strategy

4.1 General Strategy: Outline your approach to testing the system calls, including how you handle normal operations and error cases.

I began by writing tests to make sure the system calls work when under normal conditions. I then extended my tests to edge cases. I finally wrote tests for the error cases.

4.2 Test Cases: Provide a list of test cases, explaining what each one covers and why itâ€™s important.

mailbox_init_test: BST is properly initialized
mailbox_shutdown_test: BST is properly deleted
mailbox_create_test_one: Doesn't allow duplicate IDs for mailboxes
mailbox_create_test_two: Creating mailbox with unique ID works
mailbox_destroy_test_one: Can't delete nonexistant mailbox
mailbox_destroy_test_two: Can delete mailbox when given ID of the mailbox
mailbox_send_test_one: Can't send message to nonexistant mailbox
mailbox_send_test_two: Properly sends message to mailbox
mailbox_send_test_three: Doesn't allow sending NULL as a message to a mailbox
mailbox_recv_test_one: Can't receive mail from nonexistant mailbox
mailbox_recv_test_two: Can't receive mail from empty mailbox
mailbox_recv_test_three: Can't store received piece of mail into NULL
mailbox_recv_test_four: Can receive part of message if len < message
mailbox_recv_test_five: Can receive the full message
mailbox_delete_test_one: Can't delete from nonexistant mailbox
mailbox_delete_test_two: Deletes oldest message from mailbox
mailbox_delete_test_three: Can't delete from empty mailbox
mailbox_delete_test_four: Pushes up second oldest message to front after delete
message_count_test_one: Can't get messages from nonexistant mailbox
message_count_test_two: Gets 0 messages from empty mailbox
message_count_test_three: Gets number of messages from mailbox
message_length_test_one: Can't get oldest message length from nonexistant mailbox
message_length_test_two: Can't get oldest message length from empty mailbox
message_length_test_three: Gets oldest message length from mailbox

5. Troubleshooting
Common Issues: List any common issues that might arise and how to resolve them.

The numbers associated with my syscalls are in a bit of a different order.

Order: 
#define __NR_mailbox_init 548
#define __NR_mailbox_shutdown 549
#define __NR_mailbox_create 550
#define __NR_mailbox_send 551
#define __NR_mailbox_delete 552
#define __NR_mailbox_recv 553
#define __NR_mailbox_destroy 554
#define __NR_message_count 555
#define __NR_message_length 556

6. References

Please state all outside resources used during the project. This would include websites or textbooks used. Also, please include input and output of any LLM (ChatGPT, etc.) used.

GeeksForGeeks

